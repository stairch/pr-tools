import{Q as p,g as m}from"./index-Ctoyu7k7.js";const y=async e=>{if(e)return new Promise((n,t)=>{const a=new FileReader;a.onload=()=>{const r=a.result;n(r.replace(/^data:image\/[a-z]+;base64,/,""))},a.onerror=t,a.readAsDataURL(e)})},u=()=>{f().update()},o={announements:{async getAll(){return fetch("/api/announcements").then(e=>e.json())},async create(e){const t=await(await fetch("/api/announcements",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();return u(),t},async search(e,n=!1,t,a=10,r=0){var h,d;const s=new URLSearchParams;s.append("query",e),s.append("author",n?"me":""),s.append("start",((h=t==null?void 0:t.start)==null?void 0:h.toISOString())||""),s.append("end",((d=t==null?void 0:t.end)==null?void 0:d.toISOString())||""),s.append("limit",a.toString()),s.append("offset",r.toString());const c=await fetch(`/api/announcements?${s}`);return{items:await c.json(),totalCount:Number(c.headers.get("X-Total-Count")||0)}},async get(e){return fetch(`/api/announcements/${e}`).then(n=>n.json())},async update(e){const t=await(await fetch(`/api/announcements/${e.id}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();return u(),t},async delete(e){await fetch(`/api/announcements/${e}`,{method:"DELETE"}).then(u)},async types(){return fetch("/api/announcements/types").then(e=>e.json())},schedule:{async get(e){return fetch(`/api/announcements/${e}/schedules`).then(n=>n.json())},async update(e,n){const t=await fetch(`/api/announcements/${e}/schedules`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});if(t.ok)return null;const a=await t.text();return console.error(a),a}},async publish(e,n,t,a,r,s){const c=await fetch(`/api/announcements/${e}/publish`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({id:e,scope:n,server:t,type:a,persona:r,image:await y(s)})});if(c.ok)return null;const i=await c.text();return console.error(i),i},async discordServers(){return fetch("/api/announcements/discord/servers").then(e=>e.json())},async telegramChats(){return fetch("/api/announcements/telegram/chats").then(e=>e.json())},async personas(){return fetch("/api/announcements/personas").then(e=>e.json())}},db:{async students(){return fetch("/api/students").then(e=>e.json())},async updateStudents(e){const n=await fetch("/api/students",{method:"PUT",headers:{"Content-Type":"application/xml"},body:e});return n.ok?null:await n.text()},async updateModules(e){const n=await fetch("/api/modules",{method:"PUT",headers:{"Content-Type":"application/xml"},body:e});return n.ok?null:await n.text()},async getDegreeProgrammes(){return fetch("/api/degree-programmes").then(e=>e.json())},async updateDegreeProgrammes(e){await fetch("/api/degree-programmes",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})}},commonSources:{_cache:new Map,personas:{_base:"/common/personas",_cacheKey:"personas",async definition(){if(o.commonSources._cache.has(this._cacheKey))return o.commonSources._cache.get(this._cacheKey);const n=await(await fetch(this._base+"/definition.json")).json();return o.commonSources._cache.set(this._cacheKey,n.items),n.items},avatarByPath(e){return this._base+"/avatars/"+e},async avatarByName(e){const n=await this.definition();return this.avatarByPath(n[e].avatar)}},announcementTypes:{_base:"/common/announcements",_cacheKey:"announcement.types",async definition(){if(o.commonSources._cache.has(this._cacheKey))return o.commonSources._cache.get(this._cacheKey);const n=await(await fetch(this._base+"/types.json")).json();return o.commonSources._cache.set(this._cacheKey,n.items),n.items},async roleByType(e){return(await this.definition())[e].role}}}},f=p("counter",()=>{const e=m([]),n=async()=>{e.value=await o.announements.getAll()},t=async()=>"/announcements/"+(await o.announements.create({title:"",message:{de:"",en:""}})).id;return n(),{announcements:e,update:n,create:t}});export{o as a,f as u};
